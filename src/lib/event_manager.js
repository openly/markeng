// Generated by CoffeeScript 1.7.1
var EventManager, async, _;

_ = require('underscore');

async = require('async');

EventManager = (function() {
  function EventManager() {
    this.events = [];
  }

  EventManager.prototype.on = function(type, event, handler) {
    return this.events.push({
      type: type,
      event: event,
      handler: handler
    });
  };

  EventManager.prototype.handlersFor = function(type, event) {
    var filtered;
    filtered = _.filter(this.events, function(e) {
      return e.type === type && e.event === event;
    });
    return _.map(filtered, function(h) {
      return h.handler;
    });
  };

  EventManager.prototype.raiseEvent = function(type, eventName, context, args, callback) {
    var calls, eventArgs, handlers;
    eventArgs = args;
    handlers = this.handlersFor(type, eventName);
    if (handlers.length === 0) {
      return callback(null, args);
    }
    calls = _.map(handlers, function(handler) {
      return function(asyncCallback) {
        return handler.apply(context, [
          eventArgs, function(e, data) {
            if (e == null) {
              eventArgs = data;
            }
            return asyncCallback(e);
          }
        ]);
      };
    });
    return async.series(calls, function(e) {
      return callback(e, eventArgs);
    });
  };

  return EventManager;

})();

module.exports = new EventManager;
